{
  "folder": {
    "prefix": "folder",
    "description": "folder",
    "body": [
      " üìÅ"
    ]
  },
  "emo1": {
    "prefix": "emo1",
    "description": "emoji 1",
    "body": [
      "ëóï"
    ]
  },
  "emo2": {
    "prefix": "emo2",
    "description": "emoji 2",
    "body": [
      "ëóó"
    ]
  },
  "emo3": {
    "prefix": "emo3",
    "description": "emoji 3",
    "body": [
      "ëóå"
    ]
  },
  "emo4": {
    "prefix": "emo4",
    "description": "emoji 4",
    "body": [
      "ëóï"
    ]
  },
  "emo5": {
    "prefix": "emo5",
    "description": "emoji 5",
    "body": [
      "ëóç"
    ]
  },
  "emo6": {
    "prefix": "emo6",
    "description": "emoji 6",
    "body": [
      "·™£"
    ]
  },
  "emo7": {
    "prefix": "emo7",
    "description": "emoji 7",
    "body": [
      "·™•"
    ]
  },
  "emo8": {
    "prefix": "emo8",
    "description": "emoji 8",
    "body": [
      "‹Ä"
    ]
  },
  "emo9": {
    "prefix": "emo9",
    "description": "emoji 9",
    "body": [
      "‚Ü¢"
    ]
  },
  "toggle": {
    "prefix": "toggle",
    "description": "toggle tab",
    "body": [
      "<details>",
      "<summary>${1:Title}</summary>",
      "<div>",
      "",
      "$2",
      "",
      "</div>",
      "</details>"
    ]
  },
  "pbadge": {
    "prefix": "pbadge",
    "description": "primary badge",
    "body": [
      "<span class=\"badge badge--primary\"> ${1:${TM_SELECTED_TEXT}} </span>"
    ]
  },
  "primary badge": {
    "prefix": "primary badge",
    "description": "primary badge",
    "body": [
      "<span class=\"badge badge--primary\"> ${1:${TM_SELECTED_TEXT}} </span>"
    ]
  },
  "sbadge": {
    "prefix": "sbadge",
    "description": "secondary badge",
    "body": [
      "<span class=\"badge badge--secondary\"> ${1:${TM_SELECTED_TEXT}} </span>"
    ]
  },
  "secondary badge": {
    "prefix": "secondary badge",
    "description": "secondary badge",
    "body": [
      "<span class=\"badge badge--secondary\"> ${1:${TM_SELECTED_TEXT}} </span>"
    ]
  },
  "success badge": {
    "prefix": "success badge",
    "description": "success badge",
    "body": [
      "<span class=\"badge badge--success\"> ${1:${TM_SELECTED_TEXT}} </span>"
    ]
  },
  "info badge": {
    "prefix": "info badge",
    "description": "info badge",
    "body": [
      "<span class=\"badge badge--info\"> ${1:${TM_SELECTED_TEXT}} </span>"
    ]
  },
  "warning badge": {
    "prefix": "warning badge",
    "description": "warning badge",
    "body": [
      "<span class=\"badge badge--warning\"> ${1:${TM_SELECTED_TEXT}} </span>"
    ]
  },
  "see result": {
    "prefix": "see result",
    "description": "see result",
    "body": [
      "<details>",
      "<summary>See results</summary>",
      "<div>",
      "",
      "$0",
      "",
      "</div>",
      "</details>"
    ]
  },
  "see example": {
    "prefix": "see example",
    "description": "see example",
    "body": [
      "<Tabs>",
      "<TabItem value=\"example\" label=\"example\">",
      "",
      "import EXAMPLE${TM_LINE_NUMBER} from \"./${1}\";",
      "",
      "<EXAMPLE${TM_LINE_NUMBER} />",
      "",
      "</TabItem>",
      "",
      "<TabItem value=\"close\" label=\"‚Ü¢ close\" default>",
      "",
      "</TabItem>",
      "</Tabs>"
    ]
  },
  "interface and example": {
    "prefix": "Interface and example",
    "description": "Interface and example",
    "body": [
      "<Tabs>",
      "<TabItem value=\"interface\" label=\"Interface\" default>",
      "",
      "```fortran",
      " ",
      "```",
      "",
      "</TabItem>",
      "",
      "<TabItem value=\"example\" label=\"example\">",
      "",
      "import EXAMPLE${TM_LINE_NUMBER} from \"./${0}\";",
      "",
      "<EXAMPLE${TM_LINE_NUMBER} />",
      "",
      "</TabItem>",
      "",
      "<TabItem value=\"close\" label=\"‚Ü¢ close\">",
      "",
      "</TabItem>",
      "</Tabs>",
      ""
    ]
  },
  "see interface": {
    "prefix": "see interface",
    "description": "see interface",
    "body": [
      "<Tabs>",
      "<TabItem value=\"interface\" label=\"‹Ä See Interface\" default>",
      "",
      "```fortran",
      " ",
      "```",
      "",
      "</TabItem>",
      "",
      "<TabItem value=\"close\" label=\"‚Ü¢ close\" default>",
      "",
      "</TabItem>",
      "</Tabs>"
    ]
  },
  "command result close": {
    "prefix": "command result close",
    "description": "create a tab for command result and close",
    "body": [
      "<Tabs>",
      "",
      "<TabItem value=\"command \" label=\"¬ª Command\">",
      "",
      "",
      "",
      "</TabItem>",
      "",
      "<TabItem value=\"result\" label=\"¬ª Result\">",
      "",
      "",
      "",
      "</TabItem>",
      "",
      "<TabItem value=\"close\" label=\"‚Ü¢ close\" default>",
      "",
      "</TabItem>",
      "",
      "</Tabs>"
    ]
  },
  "go": {
    "prefix": "go",
    "description": "go code fence",
    "body": [
      "```bash",
      "${0}",
      "```"
    ]
  },
  "bash": {
    "prefix": "bash",
    "description": "bash code fence",
    "body": [
      "```bash",
      "${0}",
      "```"
    ]
  },
  "fortran": {
    "prefix": "fortran",
    "description": "enter fortran code",
    "body": [
      "```fortran",
      "${0}",
      "```"
    ]
  },
  "dfence": {
    "prefix": "dfence",
    "description": "break the fortran code fence in two parts",
    "body": [
      "```",
      "",
      "```fortran"
    ]
  },
  "result": {
    "prefix": "result",
    "description": "results",
    "body": [
      "```bash title=\"results\"",
      "$0",
      "```"
    ]
  },
  "danger": {
    "prefix": "danger",
    "description": "danger for pymdownx",
    "body": [
      "!!! danger \"$1\"",
      "    $2"
    ]
  },
  "summary": {
    "prefix": "summary",
    "description": "summary for pymdownx",
    "body": [
      "!!! summary \"$1\"",
      "    $2"
    ]
  },
  "include example": {
    "prefix": "include example",
    "description": "include example file",
    "body": [
      "",
      "import EXAMPLE${TM_LINE_NUMBER} from \"./${1}\";",
      "",
      "<EXAMPLE${TM_LINE_NUMBER} />",
      ""
    ]
  },
  "note": {
    "prefix": "note",
    "description": "note block",
    "body": [
      ":::note $1",
      "$0",
      ":::"
    ]
  },
  "abstract": {
    "prefix": "abstract",
    "description": "abstract for pymdownx",
    "body": [
      "!!! abstract \"$1\"",
      "    $2"
    ]
  },
  "information": {
    "prefix": "information",
    "description": "info for pymdownx",
    "body": [
      "!!! info \"$1\"",
      "    $2"
    ]
  },
  "interface": {
    "prefix": "interface",
    "description": "fortran code block for interface",
    "body": [
      "```fortran title=\"Interface\"",
      "${1:${TM_SELECTED_TEXT}}",
      "```"
    ]
  },
  "tip": {
    "prefix": "tip",
    "description": "tip for pymdownx",
    "body": [
      "!!! tip \"$1\"",
      "    $2"
    ]
  },
  "success": {
    "prefix": "success",
    "description": "success for pymdownx",
    "body": [
      "!!! success \"$1\"",
      "    $2"
    ]
  },
  "question": {
    "prefix": "question",
    "description": "question for pymdownx",
    "body": [
      "!!! question \"$1\"",
      "    $2"
    ]
  },
  "warning": {
    "prefix": "warning",
    "description": "warning for pymdownx",
    "body": [
      "!!! warning \"$1\"",
      "    $2"
    ]
  },
  "failure": {
    "prefix": "failure",
    "description": "failure for pymdownx",
    "body": [
      "!!! failure \"$1\"",
      "    $2"
    ]
  },
  "bug": {
    "prefix": "bug",
    "description": "bug for pymdownx",
    "body": [
      "!!! bug \"$1\"",
      "    $2"
    ]
  },
  "quotation": {
    "prefix": "quotation",
    "description": "quote for pymdownx",
    "body": [
      "!!! quote \"$1\"",
      "    $2"
    ]
  },
  "cleanup": {
    "prefix": "cleanup",
    "description": "cleanup for fortran code",
    "body": [
      "!!! note \"cleanup\"",
      "    $1"
    ]
  },
  "frontmatter": {
    "prefix": "frontmatter",
    "description": "create front matter for easifem pages",
    "body": [
      "---",
      "sidebar_position: 1",
      "date:  ",
      "update:  ",
      "status: stable",
      "docs: done",
      "extpkgs: none",
      "category: ",
      "tags: ",
      "---"
    ]
  },
  "test": {
    "prefix": "test",
    "description": "create test file template for easifem",
    "body": [
      "---",
      "author: Vikas Sharma, Ph.D.",
      "date: $3",
      "tags:",
      "    - $4",
      "---",
      "    ",
      "# $1 example $2",
      "    ",
      "## Modules and classes",
      "    ",
      "- [[]]",
      "    ",
      "## Usage",
      "    ",
      "```fortran",
      "PROGRAM main",
      "```",
      "    ",
      "```fortran",
      "END PROGRAM main",
      "```"
    ]
  },
  "doc": {
    "prefix": "documentation",
    "description": "template for easifem documentation",
    "body": [
      "---",
      "author: Vikas Sharma, Ph.D.",
      "date: $1",
      "---",
      "    ",
      "# $2 ",
      "    ",
      "## Introduction",
      "    ",
      "## Structure",
      "    ",
      "## Constructor Methods",
      "    ",
      "## IO Methods",
      "    ",
      "## Set Methods",
      "    ",
      "## Get Methods",
      "    "
    ]
  },
  "pages": {
    "prefix": "page",
    "description": "add page to module",
    "body": "!{!pages/$1_.md!}"
  },
  "gnu-gpl3": {
    "prefix": "gpl3",
    "description": "GNU-GPL3 licence",
    "body": [
      "! This program is a part of EASIFEM library",
      "! Copyright (C) 2020-2021  Vikas Sharma, Ph.D",
      "!",
      "! This program is free software: you can redistribute it and/or modify",
      "! it under the terms of the GNU General Public License as published by",
      "! the Free Software Foundation, either version 3 of the License, or",
      "! (at your option) any later version.",
      "!",
      "! This program is distributed in the hope that it will be useful,",
      "! but WITHOUT ANY WARRANTY; without even the implied warranty of",
      "! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
      "! GNU General Public License for more details.",
      "!",
      "! You should have received a copy of the GNU General Public License",
      "! along with this program.  If not, see <https: //www.gnu.org/licenses/>",
      "!"
    ]
  },
  "break": {
    "prefix": "break",
    "description": "break the lines ",
    "body": [
      " &",
      "&$0"
    ]
  },
  "int": {
    "prefix": "int",
    "description": "integer",
    "body": "INTEGER( I4B )"
  },
  "allint": {
    "prefix": "allint",
    "description": "all integer",
    "body": "INTEGER(Int8| Int16 | Int32 | Int64)"
  },
  "allnumbers": {
    "prefix": "allnumbers",
    "description": "all numbers",
    "body": "INTEGER(Int8| Int16 | Int32 | Int64) | REAL(Real32| Real64)"
  },
  "ioi": {
    "prefix": "ioi",
    "body": "INTEGER( I4B ), OPTIONAL, INTENT( IN ) :: ",
    "description": "real optional in"
  },
  "ii": {
    "prefix": "ii",
    "body": "INTEGER( I4B ), INTENT( IN ) :: ",
    "description": "real in"
  },
  "ioo": {
    "prefix": "ioo",
    "body": "INTEGER( I4B ), OPTIONAL, INTENT( OUT ) :: ",
    "description": "real optional out"
  },
  "io": {
    "prefix": "io",
    "body": "INTEGER( I4B ), INTENT( OUT ) :: ",
    "description": "real out"
  },
  "ioio": {
    "prefix": "ioio",
    "body": "INTEGER( I4B ), OPTIONAL, INTENT( INOUT ) :: ",
    "description": "real optional inout"
  },
  "iio": {
    "prefix": "iio",
    "body": "INTEGER( I4B ), INTENT( INOUT ) :: ",
    "description": "real inout"
  },
  "allreal": {
    "prefix": "allreal",
    "body": "REAL(Real32 | Real64) ",
    "description": "all real"
  },
  "real": {
    "prefix": "real",
    "body": "REAL( DFP ) ",
    "description": "real"
  },
  "roi": {
    "prefix": "roi",
    "body": "REAL( DFP ), OPTIONAL, INTENT( IN ) :: ",
    "description": "real optional in"
  },
  "ri": {
    "prefix": "ri",
    "body": "REAL( DFP ), INTENT( IN ) :: ",
    "description": "real in"
  },
  "roo": {
    "prefix": "roo",
    "body": "REAL( DFP ), OPTIONAL, INTENT( OUT ) :: ",
    "description": "real optional out"
  },
  "ro": {
    "prefix": "ro",
    "body": "REAL( DFP ), INTENT( OUT ) :: ",
    "description": "real out"
  },
  "roio": {
    "prefix": "roio",
    "body": "REAL( DFP ), OPTIONAL, INTENT( INOUT ) :: ",
    "description": "real optional inout"
  },
  "rio": {
    "prefix": "rio",
    "body": "REAL( DFP ), INTENT( INOUT ) :: ",
    "description": "real inout"
  },
  "logical": {
    "prefix": "logi",
    "description": "logical",
    "body": "LOGICAL( LGT ) "
  },
  "modpuresub": {
    "prefix": "mps",
    "description": "module pure subroutine",
    "body": [
      "INTERFACE",
      "MODULE PURE SUBROUTINE ${NAME}( $0 )",
      "\t",
      "END SUBROUTINE ${NAME}",
      "END INTERFACE",
      ""
    ]
  },
  "warn": {
    "prefix": "warn",
    "description": "warning ",
    "body": [
      "!@warning",
      "! \t$0",
      "!@endwarning"
    ]
  },
  "todo": {
    "prefix": "todo",
    "description": "todo ",
    "body": [
      "!@todo",
      "! \t$0",
      "!@endtodo"
    ]
  },
  "intro": {
    "prefix": "intro",
    "description": "introduction ",
    "body": [
      "!# Introduction",
      "! \t$0"
    ]
  },
  "vikas": {
    "prefix": "vikas",
    "description": "vikas",
    "body": [
      "!> author: Vikas Sharma, Ph. D.",
      "! date: \t$1",
      "! summary: \t$2"
    ]
  },
  "szaghi": {
    "prefix": "szaghi",
    "description": "szaghi",
    "body": [
      "!> author: Stefano Zaghi, https://github.com/szaghi",
      "! date: \t$1",
      "! summary: \t$2"
    ]
  },
  "usage": {
    "prefix": "use",
    "description": "use",
    "body": [
      "! ",
      "!## Usage",
      "! ",
      "!```fortran",
      "! $0",
      "!```"
    ]
  },
  "cuse": {
    "prefix": "cuse",
    "description": "c-lang use in markdown",
    "body": [
      "! ",
      "!## CInterface",
      "! ",
      "!```c",
      "! $0",
      "!```"
    ]
  },
  "modsub": {
    "prefix": "ms",
    "description": "module subroutine",
    "body": [
      "INTERFACE",
      "MODULE SUBROUTINE ${NAME}( ${Name2} )",
      "\t$0",
      "END SUBROUTINE ${NAME}",
      "END INTERFACE",
      ""
    ]
  },
  "modpurefunc": {
    "prefix": "mpf",
    "description": "module pure function",
    "body": [
      "INTERFACE",
      "MODULE PURE FUNCTION ${NAME}( ${name2} ) RESULT( ans )",
      "\t$0",
      "END FUNCTION ${NAME}",
      "END INTERFACE",
      ""
    ]
  },
  "modelemfunc": {
    "prefix": "mef",
    "description": "module elemental function",
    "body": [
      "INTERFACE",
      "MODULE ELEMENTAL FUNCTION ${NAME}( ${name2} ) RESULT( ans )",
      "\t$0",
      "END FUNCTION ${NAME}",
      "END INTERFACE",
      ""
    ]
  },
  "class": {
    "prefix": "cls",
    "description": "class",
    "body": "CLASS( $1 )"
  },
  "intentin": {
    "prefix": "in",
    "description": "intent in",
    "body": "INTENT( IN ) :: $1"
  },
  "intentout": {
    "prefix": "out",
    "description": "intent out",
    "body": "INTENT( OUT ) :: $1"
  },
  "intentinout": {
    "prefix": "inout",
    "description": "intent in out",
    "body": "INTENT( INOUT ) :: $1"
  },
  "generic": {
    "prefix": "generic",
    "description": "itnerface",
    "body": [
      "INTERFACE ${NAME}",
      "\tMODULE PROCEDURE $0",
      "END INTERFACE ${NAME}",
      "",
      "PUBLIC :: ${NAME}"
    ]
  },
  "procedure": {
    "prefix": "proc",
    "description": "procedure",
    "body": "PROCEDURE, PUBLIC, PASS( obj ) :: $1"
  },
  "moduleprocedure": {
    "prefix": "mp",
    "description": "module procedure",
    "body": [
      "MODULE PROCEDURE ${NAME}",
      "\t$0",
      "END PROCEDURE ${NAME}"
    ]
  },
  "modulefunction": {
    "prefix": "mf",
    "description": "module function",
    "body": [
      "INTERFACE",
      "MODULE FUNCTION $1( $2 ) RESULT( ans )",
      "\t$0",
      "END FUNCTION $1",
      "END INTERFACE"
    ]
  },
  "char": {
    "prefix": "char",
    "description": "charcter(len=*)",
    "body": "CHARACTER( LEN = * )"
  },
  "display": {
    "prefix": "disp",
    "description": "display",
    "body": [
      "INTERFACE",
      "MODULE SUBROUTINE ${NAME1}( Obj, Msg, UnitNo )",
      "\tCLASS( ${NAME2} ), INTENT( IN ) :: Obj",
      "\tCHARACTER( LEN = * ), INTENT( IN ) :: Msg",
      "\tINTEGER( I4B ), OPTIONAL, INTENT( IN ) :: UnitNo",
      "END SUBROUTINE ${NAME1}",
      "END INTERFACE",
      ""
    ]
  },
  "error": {
    "prefix": "error",
    "description": "Raise error",
    "body": [
      "CALL e%RaiseError(modName //'::'//myName// ' - '// &",
      "\t& '$1')"
    ]
  },
  "info": {
    "prefix": "info",
    "description": "Raise info",
    "body": [
      "CALL e%RaiseInformation(modName //'::'//myName// ' - '// &",
      "\t& '$1')"
    ]
  },
  "debug": {
    "prefix": "debug",
    "description": "Raise debug",
    "body": [
      "CALL e%RaiseDebug(modName //'::'//myName// ' - '// &",
      "\t& '$1')"
    ]
  },
  "ifpresent": {
    "prefix": "ifpresent",
    "description": "ifpresent",
    "body": [
      "IF( PRESENT( $1 ) ) THEN",
      "$2",
      "ELSE",
      "$3",
      "END IF"
    ]
  },
  "myname": {
    "prefix": "myname",
    "description": "myname",
    "body": [
      "CHARACTER( LEN = * ), PARAMETER :: myName=$1"
    ]
  },
  "ifp": {
    "prefix": "ifp",
    "description": "if(present(a))b=a",
    "body": [
      "IF( PRESENT( $1 ) ) $2=$1"
    ]
  },
  "ifa": {
    "prefix": "ifa",
    "description": "if(allocated(a))",
    "body": [
      "IF( ALLOCATED( $1 ) ) $2"
    ]
  },
  "importDocs": {
    "prefix": "importDocs",
    "description": "import docs",
    "body": [
      "import DocCardList from '@theme/DocCardList';",
      "",
      "<DocCardList />"
    ]
  },
  "importTabs": {
    "prefix": "importTabs",
    "description": "import tabs amd tabitems from theme",
    "body": [
      "import Tabs from '@theme/Tabs';",
      "import TabItem from '@theme/TabItem';",
      "$0"
    ]
  },
  "createTabs": {
    "prefix": "tabs",
    "description": "create tabs",
    "body": [
      "<Tabs>",
      "<TabItem value=\"${1:value}\" label=\"${2:label}\" default>",
      "$0",
      "</TabItem>",
      "</Tabs>"
    ]
  },
  "createTabItems": {
    "prefix": "tabItems",
    "description": "create tabs items",
    "body": [
      "<TabItem value=\"${1:value}\" label=\"${2:label}\">",
      "",
      "$0",
      "",
      "</TabItem>"
    ]
  },
  "readMore": {
    "prefix": "readmore",
    "description": "Read more page",
    "body": [
      "import Link from '@docusaurus/Link';",
      "",
      "<div className='container margin-vert--lg'>",
      "<div className='row row--no-gutters'>",
      "<div className=\"col col--12\">",
      "<Link to=\"/docs/QuadraturePoint/QuadraturePoint_\" className=\"button button--lg button--fill button--block button--success\">Read More</Link>",
      "</div>",
      "</div>",
      "</div>",
      ""
    ]
  },
  "Italic Text": {
    "prefix": [
      "italic",
      "\\italic",
      "*"
    ],
    "body": "\\textit{$1}$0",
    "description": "Insert italic text."
  },
  "Bold Text": {
    "prefix": [
      "bold",
      "\\bold",
      "**"
    ],
    "body": "\\textbf{$1}$0",
    "description": "Insert bold text."
  },
  "Bold Italic Text": {
    "prefix": [
      "bolditalic",
      "\\bolditalic",
      "***"
    ],
    "body": "\\textbf{\\textit{$1}}$0",
    "description": "Insert bold italic text."
  },
  "Bold Math": {
    "prefix": [
      "mathbf",
      "\\mathbf"
    ],
    "body": "\\mathbf{$1}$0",
    "description": "Insert bold text."
  },
  "frac": {
    "prefix": [
      "frac",
      "\\frac"
    ],
    "body": "\\frac{$1}{$0}",
    "description": "fraction"
  },
  "lambda": {
    "prefix": [
      "lambda",
      "\\lambda"
    ],
    "body": "\\lambda",
    "description": "lambda"
  },
  "xi": {
    "prefix": [
      "xi",
      "\\xi"
    ],
    "body": "\\xi",
    "description": "xi"
  },
  "eta": {
    "prefix": [
      "eta",
      "\\eta"
    ],
    "body": "\\eta",
    "description": "eta"
  },
  "zeta": {
    "prefix": [
      "zeta",
      "\\zeta"
    ],
    "body": "\\zeta",
    "description": "zeta"
  }
}
