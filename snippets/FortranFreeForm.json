{
  "pages": {
    "prefix": "page",
    "description": "add page to module",
    "body": "!{!pages/$1_.md!}"
  },
  "gnu-gpl3": {
    "prefix": "gpl3",
    "description": "GNU-GPL3 licence",
    "body": [
      "! This program is a part of EASIFEM library",
      "! Copyright (C) 2020-2021  Vikas Sharma, Ph.D",
      "!",
      "! This program is free software: you can redistribute it and/or modify",
      "! it under the terms of the GNU General Public License as published by",
      "! the Free Software Foundation, either version 3 of the License, or",
      "! (at your option) any later version.",
      "!",
      "! This program is distributed in the hope that it will be useful,",
      "! but WITHOUT ANY WARRANTY; without even the implied warranty of",
      "! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
      "! GNU General Public License for more details.",
      "!",
      "! You should have received a copy of the GNU General Public License",
      "! along with this program.  If not, see <https: //www.gnu.org/licenses/>",
      "!"
    ]
  },
  "break": {
    "prefix": "break",
    "description": "break the lines ",
    "body": [
      " &",
      "&$1"
    ]
  },
  "ia": {
    "prefix": "ia",
    "body": "INTEGER( I4B ), ALlOCATABLE :: $0",
    "description": "Integer allocatable :: "
  },
  "ip": {
    "prefix": "ip",
    "body": "INTEGER( I4B ), PARAMETER :: $0",
    "description": "integer parameter :: "
  },
  "rp": {
    "prefix": "rp",
    "body": "REAL(DFP), PARAMETER :: $0",
    "description": "real parameter :: "
  },
  "ioi": {
    "prefix": "ioi",
    "body": "INTEGER( I4B ), OPTIONAL, INTENT( IN ) :: ",
    "description": "real optional in"
  },
  "ii": {
    "prefix": "ii",
    "body": "INTEGER( I4B ), INTENT( IN ) :: ",
    "description": "real in"
  },
  "ioo": {
    "prefix": "ioo",
    "body": "INTEGER( I4B ), OPTIONAL, INTENT( OUT ) :: ",
    "description": "real optional out"
  },
  "io": {
    "prefix": "io",
    "body": "INTEGER( I4B ), INTENT( OUT ) :: ",
    "description": "real out"
  },
  "ioio": {
    "prefix": "ioio",
    "body": "INTEGER( I4B ), OPTIONAL, INTENT( INOUT ) :: ",
    "description": "real optional inout"
  },
  "iio": {
    "prefix": "iio",
    "body": "INTEGER( I4B ), INTENT( INOUT ) :: ",
    "description": "real inout"
  },
  "civ": {
    "prefix": "civ",
    "body": "INTEGER( C_INT ), VALUE, INTENT( IN ) :: ",
    "description": "cint value in"
  },
  "real": {
    "prefix": "real",
    "body": "REAL( DFP ) ",
    "description": "real"
  },
  "ra": {
    "prefix": "ra",
    "body": "REAL( DFP ), ALLOCATABLE :: $1",
    "description": "real allocatable"
  },
  "roi": {
    "prefix": "roi",
    "body": "REAL( DFP ), OPTIONAL, INTENT( IN ) :: ",
    "description": "real optional in"
  },
  "ri": {
    "prefix": "ri",
    "body": "REAL( DFP ), INTENT( IN ) :: ",
    "description": "real in"
  },
  "roo": {
    "prefix": "roo",
    "body": "REAL( DFP ), OPTIONAL, INTENT( OUT ) :: ",
    "description": "real optional out"
  },
  "ro": {
    "prefix": "ro",
    "body": "REAL( DFP ), INTENT( OUT ) :: ",
    "description": "real out"
  },
  "roio": {
    "prefix": "roio",
    "body": "REAL( DFP ), OPTIONAL, INTENT( INOUT ) :: ",
    "description": "real optional inout"
  },
  "rio": {
    "prefix": "rio",
    "body": "REAL( DFP ), INTENT( INOUT ) :: ",
    "description": "real inout"
  },
  "logical": {
    "prefix": "logi",
    "description": "logical",
    "body": "LOGICAL( LGT ) $0"
  },
  "modpuresub": {
    "prefix": "mps",
    "description": "module pure subroutine",
    "body": [
      "INTERFACE",
      "MODULE PURE SUBROUTINE ${1}( $0 )",
      "\t",
      "END SUBROUTINE ${1}",
      "END INTERFACE",
      ""
    ]
  },
  "note": {
    "prefix": "note",
    "description": "note ",
    "body": [
      "!@note",
      "! \t$0",
      "!@endnote"
    ]
  },
  "todo": {
    "prefix": "todo",
    "description": "todo ",
    "body": [
      "!@todo",
      "! \t$0",
      "!@endtodo"
    ]
  },
  "intro": {
    "prefix": "intro",
    "description": "introduction ",
    "body": [
      "!# Introduction",
      "! \t$0"
    ]
  },
  "vikas": {
    "prefix": "vikas",
    "description": "vikas",
    "body": [
      "!> author: Vikas Sharma, Ph. D.",
      "! date: \t",
      "! summary: \t"
    ]
  },
  "shion": {
    "prefix": "shion",
    "description": "shion",
    "body": [
      "!> author: Shion Shimizu",
      "! date: \t",
      "! summary: \t"
    ]
  },
  "szaghi": {
    "prefix": "szaghi",
    "description": "szaghi",
    "body": [
      "!> author: Stefano Zaghi, https://github.com/szaghi",
      "! date: \t$1",
      "! summary: \t$2"
    ]
  },
  "usage": {
    "prefix": "use",
    "description": "use",
    "body": [
      "! ",
      "!## Usage",
      "! ",
      "!```fortran",
      "! $0",
      "!```"
    ]
  },
  "cuse": {
    "prefix": "cuse",
    "description": "c-lang use in markdown",
    "body": [
      "! ",
      "!## CInterface",
      "! ",
      "!```c",
      "! $0",
      "!```"
    ]
  },
  "modsub": {
    "prefix": "ms",
    "description": "module subroutine",
    "body": [
      "INTERFACE",
      "MODULE SUBROUTINE ${1}( ${2} )",
      "\t$0",
      "END SUBROUTINE ${1}",
      "END INTERFACE",
      ""
    ]
  },
  "purefunc": {
    "prefix": "pf",
    "description": "pure function",
    "body": [
      "PURE FUNCTION ${1}( ${2} ) RESULT( ans )",
      "\t$0",
      "END FUNCTION ${1}",
      ""
    ]
  },
  "modpurefunc": {
    "prefix": "mpf",
    "description": "module pure function",
    "body": [
      "INTERFACE",
      "MODULE PURE FUNCTION ${1}( ${2} ) RESULT( ans )",
      "\t$0",
      "END FUNCTION ${1}",
      "END INTERFACE",
      ""
    ]
  },
  "modelemfunc": {
    "prefix": "mef",
    "description": "module elemental function",
    "body": [
      "INTERFACE",
      "MODULE ELEMENTAL FUNCTION ${1}( ${2} ) RESULT( ans )",
      "\t$0",
      "END FUNCTION ${1}",
      "END INTERFACE",
      ""
    ]
  },
  "class": {
    "prefix": "cls",
    "description": "class",
    "body": "CLASS( $0 )"
  },
  "ci": {
    "prefix": "ci",
    "description": "class intent in",
    "body": "CLASS($1), INTENT(IN) :: $0"
  },
  "cio": {
    "prefix": "cio",
    "description": "class intent inout",
    "body": "CLASS($1), INTENT(INOUT) :: $0"
  },
  "coi": {
    "prefix": "coi",
    "description": "class optional intent in",
    "body": "CLASS($1), OPTIONAL, INTENT(IN) :: $0"
  },
  "coo": {
    "prefix": "coo",
    "description": "class optional intent out",
    "body": "CLASS($1), OPTIONAL, INTENT(OUT) :: $0"
  },
  "coio": {
    "prefix": "coio",
    "description": "class optional intent inout",
    "body": "CLASS($1), OPTIONAL, INTENT(INOUT) :: $0"
  },
  "intentin": {
    "prefix": "in",
    "description": "intent in",
    "body": "INTENT( IN ) :: $0"
  },
  "intentout": {
    "prefix": "out",
    "description": "intent out",
    "body": "INTENT( OUT ) :: $0"
  },
  "intentinout": {
    "prefix": "inout",
    "description": "intent in out",
    "body": "INTENT( INOUT ) :: $0"
  },
  "generic": {
    "prefix": "generic",
    "description": "itnerface",
    "body": [
      "INTERFACE ${1}",
      "\tMODULE PROCEDURE $0",
      "END INTERFACE ${1}",
      "",
      "PUBLIC :: ${1}"
    ]
  },
  "line": {
    "prefix": "line",
    "description": ".........",
    "body": [
      "!----------------------------------------------------------------------------",
      "!                                                                 $0",
      "!----------------------------------------------------------------------------"
    ]
  },
  "procedure": {
    "prefix": "proc",
    "description": "procedure",
    "body": "PROCEDURE, PUBLIC, PASS( obj ) :: $0"
  },
  "submoduleModuleProcedure": {
    "prefix": "smp",
    "description": "module procedure",
    "body": [
      "MODULE PROCEDURE ${1}",
      "\t$0",
      "END PROCEDURE ${1}"
    ]
  },
  "modulefunction": {
    "prefix": "mf",
    "description": "module function",
    "body": [
      "INTERFACE",
      "MODULE FUNCTION $1( $2 ) RESULT( ans )",
      "\t$0",
      "END FUNCTION $1",
      "END INTERFACE"
    ]
  },
  "display": {
    "prefix": "disp",
    "description": "display",
    "body": [
      "INTERFACE",
      "MODULE SUBROUTINE ${NAME1}( Obj, Msg, UnitNo )",
      "\tCLASS( ${NAME2} ), INTENT( IN ) :: Obj",
      "\tCHARACTER( LEN = * ), INTENT( IN ) :: Msg",
      "\tINTEGER( I4B ), OPTIONAL, INTENT( IN ) :: UnitNo",
      "END SUBROUTINE ${NAME1}",
      "END INTERFACE",
      ""
    ]
  },
  "error": {
    "prefix": "error",
    "description": "Raise error",
    "body": [
      "CALL e%RaiseError(modName //'::'//myName// ' - '// &",
      "\t& '$0')"
    ]
  },
  "implementation error": {
    "prefix": "imperror",
    "description": "Implementation error",
    "body": [
      "CALL e%RaiseError(modName //'::'//myName// ' - '// &",
      "\t& '[IMPLEMENTATION ERROR] :: This routine should be implemented by ' //&",
      "\t& 'child classes')"
    ]
  },
  "wip error": {
    "prefix": "wiperror",
    "description": "Work in progress error",
    "body": [
      "CALL e%RaiseError(modName //'::'//myName// ' - '// &",
      "\t& '[WIP] :: This routine is under development' )"
    ]
  },
  "wl error": {
    "prefix": "wlerror",
    "description": "Raise error with line number",
    "body": [
      "CALL e%RaiseError(modName //'::'//myName// ' - '// &",
      "\t& 'Check line number $0'//tostring(__LINE__))"
    ]
  },
  "info": {
    "prefix": "info",
    "description": "Raise info",
    "body": [
      "CALL e%RaiseInformation(modName //'::'//myName// ' - '// &",
      "\t& '$1')"
    ]
  },
  "warn": {
    "prefix": "warn",
    "description": "Raise warning",
    "body": [
      "CALL e%RaiseWarning(modName //'::'//myName// ' - '// &",
      "\t& '$1')"
    ]
  },
  "debug": {
    "prefix": "debug",
    "description": "Raise debug",
    "body": [
      "CALL e%RaiseDebug(modName //'::'//myName// ' - '// &",
      "\t& '$1')"
    ]
  },
  "ifpresent": {
    "prefix": "ifpresent",
    "description": "ifpresent",
    "body": [
      "IF( PRESENT( $1 ) ) THEN",
      "$2",
      "ELSE",
      "$3",
      "END IF"
    ]
  },
  "myname": {
    "prefix": "myname",
    "description": "myname",
    "body": [
      "CHARACTER(*), PARAMETER :: myName=$0"
    ]
  },
  "ifp": {
    "prefix": "ifp",
    "description": "if(present(a))b=a",
    "body": [
      "IF( PRESENT( $1 ) ) $2=$1"
    ]
  },
  "ifa": {
    "prefix": "ifa",
    "description": "if(allocated(a))",
    "body": [
      "IF( ALLOCATED( $1 ) ) $2"
    ]
  },
  "ifelse": {
    "prefix": "ifelse",
    "description": "if() then; else",
    "body": [
      "IF(${1:${TM_SELECTED_TEXT}}) THEN",
      "  ${2:body1}",
      "ELSE",
      "  ${3:body2}",
      "END IF"
    ]
  },
  "all": {
    "prefix": "all",
    "body": "all(${1:mask}${2:, dim=${3:1}})",
    "description": "all"
  },
  "alloc": {
    "prefix": "alloc",
    "body": [
      "allocate(${1:array}, stat=${2:err})",
      "if ($2 /= 0) print *, \"$1: Allocation request denied\"",
      "",
      "if (allocated($1)) deallocate($1, stat=$2)",
      "if ($2 /= 0) print *, \"$1: Deallocation request denied\""
    ],
    "description": "Allocate and Deallocate array"
  },
  "al": {
    "body": [
      "allocate(${1:array}, stat=${2:err})",
      "if ($2 /= 0) print *, \"$1: Allocation request denied\""
    ],
    "prefix": "al",
    "description": "Allocate Array"
  },
  "and": {
    "prefix": "and",
    "body": ".and.",
    "description": "And"
  },
  "any": {
    "prefix": "any",
    "body": "any(${1:mask}${2:, dim=${3:1}})",
    "description": "any"
  },
  "case": {
    "prefix": "case",
    "body": "case ${1:default}\n\t$0",
    "description": "case"
  },
  "char": {
    "prefix": "char",
    "body": "CHARACTER(${1:*}) $0",
    "description": "Character"
  },
  "close": {
    "prefix": "close",
    "body": "CLOSE(UNIT=${1:iounit}, IOSTAT=${2:ios}${3:, STATUS=\"delete\"})\n IF ($2 /= 0) STOP \"Error closing file unit $1\"\n",
    "description": "Close File"
  },
  "count": {
    "prefix": "count",
    "body": "COUNT(${1:MASK}${2:, DIM=${3:1}})",
    "description": "count"
  },
  "typ": {
    "prefix": "typ",
    "body": "type(${1:type name})${2:, ${3:attributes}} :: ${4:name}",
    "description": "Custom Type",
    "": "type(${1:type name})${2:, ${3:attributes}} :: ${4:name}"
  },
  "cy": {
    "prefix": "cy",
    "body": "cycle",
    "description": "cycle"
  },
  "data": {
    "prefix": "data",
    "body": "data ${1:variable} / ${2:data} /",
    "description": "data"
  },
  "deal": {
    "prefix": "deal",
    "body": "if (allocated($1)) deallocate(${1:array}, stat=${2:err})\nif ($2 /= 0) print *, \"$1: Deallocation request denied$0\"",
    "description": "Deallocate Array"
  },
  "dow": {
    "prefix": "dow",
    "body": "do while (${1:condition})\n\t$0\nend do",
    "description": "do while"
  },
  "do": {
    "prefix": "do",
    "body": "do${1: ${2:i} = ${3:1}, ${4:100}, ${5:1}}\n\t$0\nend do",
    "description": "do"
  },
  "dot": {
    "prefix": "dot",
    "body": "dot_product($1,$2)",
    "description": "Dot Product of Vectors"
  },
  "elif": {
    "prefix": "elif",
    "body": "else if (${1:condition}) then\n\t",
    "description": "else if"
  },
  "eq": {
    "prefix": "eq",
    "body": ".eq.",
    "description": "Equal"
  },
  "eqv": {
    "prefix": "eqv",
    "body": ".eqv.",
    "description": "Equality"
  },
  "for": {
    "prefix": "for",
    "body": "forall (${1:i=1:100}${2:, mask})\n\t$0\nend forall",
    "description": "forall"
  },
  "fun": {
    "prefix": "fun",
    "body": [
      "function ${1:name}(${2:input}) result(${3:output})",
      "\t${4:argument type}, intent(${5:inout}) :: $2",
      "\t${6:function type} :: $3",
      "\t$0",
      "end function $1"
    ],
    "description": "function"
  },
  "ge": {
    "prefix": "ge",
    "body": ".ge.",
    "description": "Greater or Equal"
  },
  "gt": {
    "prefix": "gt",
    "body": ".gt.",
    "description": "Greater Than"
  },
  "if": {
    "prefix": "if",
    "body": "if (${1:condition}) ",
    "description": "if (single line)"
  },
  "if1": {
    "prefix": "if",
    "body": "if (${1:condition}) then\n\t$0\nend if",
    "description": "if"
  },
  "imp": {
    "prefix": "imp",
    "body": "implicit none\n",
    "description": "implicit none"
  },
  "ido": {
    "prefix": "ido",
    "body": "(${1:i}, $1 = ${2:1}, ${3:100}, ${4:1})$0",
    "description": "Implied do"
  },
  "maxloc": {
    "prefix": "maxloc",
    "body": "maxloc(${1:source}${2:, mask=${3:($1>0)}})",
    "description": "Index of Maximum"
  },
  "minloc": {
    "prefix": "minloc",
    "body": "minloc(${1:source}${2:, mask=${3:$1>0}})",
    "description": "Index of Minimum"
  },
  "open": {
    "prefix": "open",
    "body": "open(unit=${1:iounit}, file=${2:name}, iostat=${3:ios}, status=\"${4:old}\", action=\"${5:read}\")\nif ($3 /= 0) stop \"Error opening file ${2/[\\\"\\'](.*)[\\\"\\']/$1/}\"\n",
    "description": "Input File"
  },
  "inq": {
    "prefix": "inq",
    "body": "inquire(file=${1:filename}, opened=${2:ioopen}, exists=${3:ioexist}, number=${4:iounit})",
    "description": "Inquire (by Filename)"
  },
  "inq1": {
    "prefix": "inq",
    "body": "inquire(unit=${1:iounit}, opened=${2:ioopen}, name=${3:filename}, action=${4:ioaction})",
    "description": "Inquire (by Unit)"
  },
  "int": {
    "prefix": "int",
    "body": "INTEGER(I4B) ",
    "description": "Integer"
  },
  "interf": {
    "prefix": "interf",
    "body": "interface ${1:name}\n\t$0\nend interface $1",
    "description": "interface"
  },
  "le": {
    "prefix": "le",
    "body": ".le.",
    "description": "Less or Equal"
  },
  "lt": {
    "prefix": "lt",
    "body": ".lt.",
    "description": "Less Than"
  },
  "log": {
    "prefix": "log",
    "body": "logical${1:(${2:kind})}${3:, ${4:attributes}} :: ${5:name}",
    "description": "Logical"
  },
  "lbound": {
    "prefix": "lbound",
    "body": "lbound(${1:source}${2:, dim=${3:1}})",
    "description": "Lower Bound"
  },
  "mat": {
    "prefix": "mat",
    "body": "matmul($1,$2)",
    "description": "Matrix Multiplication"
  },
  "max": {
    "prefix": "max",
    "body": "max($1, $2${, $3:...})$0",
    "description": "max"
  },
  "maxval": {
    "prefix": "maxval",
    "body": "maxval(${1:source}${2:, dim=${3:1}}${4:, mask=${5:($1>0)}})",
    "description": "Maximum Value"
  },
  "merge": {
    "prefix": "merge",
    "body": "merge(${1:source}, ${2:alternative}, mask=(${2:$1>0}))",
    "description": "merge"
  },
  "min": {
    "prefix": "min",
    "body": "min($1, $2${, $3:...})$0",
    "description": "min"
  },
  "minval": {
    "prefix": "minval",
    "body": "minval(${1:source}${2:, dim=${3:1}}${4:, mask=${5:($1>0)}})",
    "description": "Minimum Value"
  },
  "mp": {
    "prefix": "mp",
    "body": "module procedure ${0:name}",
    "description": "module procedure"
  },
  "mod": {
    "prefix": "mod",
    "body": "module ${1:name}\n\n\timplicit none\n\t$0\n\nend module $1\n",
    "description": "module"
  },
  "neq": {
    "prefix": "neq",
    "body": ".ne.",
    "description": "Not-Equal"
  },
  "neqv": {
    "prefix": "neqv",
    "body": ".neqv.",
    "description": "Non-Equality"
  },
  "not": {
    "prefix": "not",
    "body": ".not.",
    "description": "Not"
  },
  "open1": {
    "prefix": "open",
    "body": "open(unit=${1:iounit}, file=${2:name}, iostat=${3:ios}, &\n     status=\"${4:old/new/replace/scratch/unknown}\", action=\"${5:read/write/readwrite}\", access=\"${7:sequential/direct}\"${7/(direct)$|.*/(?1:, recl=)/}$0)\nif ($3 /= 0) stop \"Error opening file ${2/[\\\"\\'](.*)[\\\"\\']/$1/}\"",
    "description": "Open File"
  },
  "or": {
    "prefix": "or",
    "body": ".or.",
    "description": "Or"
  },
  "open2": {
    "prefix": "open",
    "body": "open(unit=${1:iounit}, file=${2:name}, iostat=${3:ios}, status=\"${4:new}\", action=\"${5:write}\")\nif ($3 /= 0) stop \"Error opening file ${2/[\\\"\\'](.*)[\\\"\\']/$1/}\"\n",
    "description": "Output File"
  },
  "pack": {
    "prefix": "pack",
    "body": "pack(${1:array}, mask=(${2:$1>0})${3:, vector=${4:destination vector}})",
    "description": "pack"
  },
  "pr": {
    "prefix": "pr",
    "body": "print*, ",
    "description": "Quick Print"
  },
  "prod": {
    "prefix": "prod",
    "body": "product(${1:source}${2:, dim=${3:1}}${4:, mask=${5:($1>0)}})",
    "description": "Product of Elements"
  },
  "prog": {
    "prefix": "prog",
    "body": "program ${1:name}\n\n\timplicit none\n\t$0\n\nend program $1\n",
    "description": "program"
  },
  "t": {
    "prefix": "t",
    "body": "type(${1:type name}) :: ",
    "description": "Quick Custom Type"
  },
  "i": {
    "prefix": "i",
    "body": "integer :: ",
    "description": "Quick Integer"
  },
  "l": {
    "prefix": "l",
    "body": "logical :: ",
    "description": "Quick Logical"
  },
  "op": {
    "prefix": "op",
    "body": "open(unit=${1:iounit}, file=${2:name}, iostat=${3:ios})\nif ($3 /= 0) stop \"Error opening file ${2/[\\\"\\'](.*)[\\\"\\']/$1/}\"",
    "description": "Quick Open"
  },
  "re": {
    "prefix": "re",
    "body": "read*, ",
    "description": "Quick Read"
  },
  "r": {
    "prefix": "r",
    "body": "real :: ",
    "description": "Quick Real"
  },
  "wr": {
    "prefix": "wr",
    "body": "write(unit=${1:iounit}, fmt=*) ${0:variables}\n",
    "description": "Quick Write"
  },
  "rn": {
    "prefix": "rn",
    "body": "call random_number($0)",
    "description": "Random Number"
  },
  "rs": {
    "prefix": "rs",
    "body": "call random_seed(${1:size=${2:<int>}}${3:put=(/$4/)})",
    "description": "Random Seed"
  },
  "read": {
    "prefix": "read",
    "body": "read(unit=${1:iounit}, fmt=\"(${2:format string})\", iostat=${3:istat}, advance='NO', size=${4:number of characters}) ${5:variables}\nif ($3 /= 0) stop \"Read error in file unit $1\"\n",
    "description": "Read (Non Advancing Mode)"
  },
  "read1": {
    "prefix": "read",
    "body": "read(unit=${1:iounit}, fmt=\"(${2:format string})\", iostat=${3:istat}) ${4:variables}\nif ($3 /= 0) stop \"Read error in file unit $1\"\n",
    "description": "Read"
  },
  "resh": {
    "prefix": "resh",
    "body": "reshape(${1:source}${2:, shape=(/$3/)}${4:, pad=(/$5/)}${6:, order=(/${7:2,1}/)})",
    "description": "reshape"
  },
  "open3": {
    "prefix": "open",
    "body": "open(unit=${1:iounit}, iostat=${3:ios}, status=\"${4:scratch}\", action=\"${5:readwrite}\")\nif ($3 /= 0) stop \"Error opening scratch file on unit $1\"\n",
    "description": "Scratch File"
  },
  "sel": {
    "prefix": "sel",
    "body": "select case ($1:variable)\n\tcase ($2:values)\n\t\t$0\nend select",
    "description": "select case"
  },
  "size": {
    "prefix": "size",
    "body": "size(${1:source}${2:, dim=${3:1}})",
    "description": "Size"
  },
  "spread": {
    "prefix": "spread",
    "body": "spread(${1:source}, dim=${2:1}, ncopies=$3)",
    "description": "spread"
  },
  "stop": {
    "prefix": "stop",
    "body": "stop \"${1:message}\"",
    "description": "stop"
  },
  "sub": {
    "prefix": "sub",
    "body": [
      "SUBROUTINE ${1:name}(${2:input})",
      "$0",
      "END SUBROUTINE ${1:name}"
    ],
    "description": "subroutine"
  },
  "sum": {
    "prefix": "sum",
    "body": "sum(${1:source}${2:, dim=${3:1}}${4:, mask=${5:($1>0)}})",
    "description": "Sum of Elements"
  },
  "type": {
    "prefix": "type",
    "body": "type ${1:type name}\n\t$0\nend type $1",
    "description": "Type Definition"
  },
  "unpack": {
    "prefix": "unpack",
    "body": "unpack(${1:vector}, mask=(${2:$1>0}), field=${3:destination array})",
    "description": "unpack"
  },
  "ubound": {
    "prefix": "ubound",
    "body": "ubound(${1:source}${2:, dim=${3:1}})",
    "description": "Upper Bound"
  },
  "wh": {
    "prefix": "wh",
    "body": "where ($1 ${2:==} $3) ",
    "description": "where (single line)"
  },
  "whe": {
    "prefix": "whe",
    "body": "where ($1 ${2:==} $3)\n\t$0\nend where",
    "description": "where"
  },
  "write": {
    "prefix": "write",
    "body": "write(unit=${1:iounit}, fmt=\"(${2:format string})\", iostat=${3:ios}${4:, advance='NO'}) ${5:variables}\nif ($3 /= 0) stop \"Write error in file unit $1\"\n",
    "description": "Write"
  },
  "fa": {
    "prefix": "fa",
    "body": ".false.",
    "description": ".false."
  },
  "tr": {
    "prefix": "tr",
    "body": ".true.",
    "description": ".true."
  },
  "checkEssential": {
    "prefix": "check essential",
    "body": [
      "INTERFACE",
      "MODULE SUBROUTINE ${1}_checkEssentialParam(obj, param)",
      "CLASS(${0}), INTENT(IN) :: obj",
      "TYPE(ParameterList_), INTENT(IN) :: param",
      "END SUBROUTINE ${1}_checkEssentialParam",
      "END INTERFACE",
      ""
    ],
    "description": "check essential parameter template"
  },
  "mpwip": {
    "prefix": "mpwip",
    "description": "module procedure work in progress",
    "body": [
      "MODULE PROCEDURE ${1}",
      "CHARACTER(*), PARAMETER :: myName=\"${1}\"",
      "CALL e%RaiseError(modName //'::'//myName// ' - '// &",
      "\t& '[WIP] this module has not been implemented yet')",
      "! TODO: Implement ${1} ${0}",
      "END PROCEDURE ${1}"
    ]
  },
  "Module procedure not implemented": {
    "prefix": "mpni",
    "description": "module procedure not implemented",
    "body": [
      "MODULE PROCEDURE ${1}",
      "CHARACTER(*), PARAMETER :: myName=\"${1}\"",
      "CALL e%RaiseError(modName //'::'//myName// ' - '// &",
      "\t& '[WIP] this module has not been implemented yet')",
      "! TODO: Implement ${1} ${0}",
      "END PROCEDURE ${1}"
    ]
  },
  "disp": {
    "prefix": "disp",
    "body": "call display($1,$2)",
    "description": "simplest display method"
  }
}
